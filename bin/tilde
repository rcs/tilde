#!/bin/bash

TILDE_DIR="$HOME/.tilde"

BIN_DIR="$TILDE_DIR/bin"
ENABLED_DIR="$TILDE_DIR/enabled"
MANIFEST_DIR="$TILDE_DIR/manifests"
MODULE_DIR="$TILDE_DIR/modules"
REPO_DIR="$TILDE_DIR/repos"

MR_CONFIG="$TILDE_DIR/mrconfig"

MR_REPO="git://git.kitenet.net/mr"
MR_DIR="$TILDE_DIR/mr"
MR_LIB="$MR_DIR/lib"
MR="$MR_DIR/mr -c $MR_CONFIG"

shopt -s nullglob


usage () {
	cat <<EOF
Usage: $0 <command> <args..>

Commands:
init		Initialize tilde directories, git clone mr, and add mrconfig to .mrtrust
add <module>	Link in <module> to be pulled in 
checkout	Checkout existing repos (runs initialization commands e.g. linking to homedir)
mr		passthru to the tilde configged mr

EOF
}

init () {
	echo "Creating directories.."
	mkdir -p "$TILDE_DIR"

	mkdir -p "$BIN_DIR"
	mkdir -p "$ENABLED_DIR"
	mkdir -p "$MANIFEST_DIR"
	mkdir -p "$MODULE_DIR"
	mkdir -p "$REPO_DIR"

	echo "Cloning mr from $MR_REPO to $MR_DIR"
	if [ ! -e "$MR_DIR" ]; then
		git clone "$MR_REPO" "$MR_DIR"
	else
		echo "W: $MR_DIR exists, not cloning mr repo into it"
	fi

	echo "Initializing tilde mrconfig.."
	cat > $MR_CONFIG <<MR
[DEFAULT]
include = cat $MR_LIB/* || true
include = cat $ENABLED_DIR/* || true
MR
	echo "Initializing .mrtrust.."
	if ! grep -e "^$MR_CONFIG$" $HOME/.mrtrust 2>&1 >/dev/null; then
		echo "$MR_CONFIG" >> ~/.mrtrust
	fi

}

install_module () {
	local module=$1

	if [ -e $ENABLED_DIR/$module ]; then
		echo "W: Module $module already enabled"
		exit 2
	elif [ ! -e $MODULE_DIR/$module ]; then
		echo "E: Couldn't find module $module ( $MODULE_DIR/$module) "
		exit 2
	fi

	link_manifest_files $module
	ln -s $MODULE_DIR/$module $ENABLED_DIR/$module
}

link_manifest_files () {
	local module=$1
	local manifest="$MANIFEST_DIR/$module"
	local this_repo="$REPO_DIR/$module"

	local bad_files=". .. .git .gitignore .gitmodules .mrconfig .svn"

	manifest=$MANIFEST_DIR/$module

	if [ ! -d "$this_repo" ]; then
		echo "E: Couldn't find directory $this_repo"
		exit
	fi

	to_link=()
	pushd "$this_repo" > /dev/null
	for file in .*; do 
		base_file=$(basename $file)
		# Check to make sure the filename isn't in the exclude list, skip to next if it is
		bad=""; 
		for excluded in $bad_files; do 
			if [[ $(basename "$file") = "$excluded" ]]; then 
				bad="true"; 
				break; 
			fi; 
		done 
		if [[ "$bad" = "true" ]]; then 
			continue; 
		fi

		# Check existing manifests for target file, exclude current module's
		local manifest_files=$(echo $MANIFEST_DIR/*)
		local matching_manifest=""
		if [ ! -z "$manifest_files" ]; then 
			matching_manifest=$(grep -l -e "^$base_file$" $manifest_files | grep -v -e "^$module$")
		fi

		if [[ ! "$matching_manifest" = "" ]]; then
			echo "E: Found matching $base_file in manifest $matching_manifest, aborting the linking of $module"
			return
		fi

		# Check existence and link status, as a link to a non-existent file fails the -e check
		if [[ (-e "$HOME/$base_file" || -L "$HOME/$base_file") && ( ! $(readlink $HOME/$base_file) =~ ^$this_repo ) ]]; then
			echo "E: Found $base_file already existing in home, and not ours. Aborting the linking of $module"
			return
		fi

		to_link=("${to_link[@]}" $base_file)
	done
	popd > /dev/null
	for linker in ${to_link[@]}; do
		ln -s "$this_repo/$linker" $HOME
		echo "$linker" >> $manifest
	done
}

uninstall () {
	local module=$1
	local this_repo="$REPO_DIR/$module"

	local bad_files=". .. .git .gitignore .gitmodules .mrconfig .svn"



	if [ ! -d "$this_repo" ]; then
		echo "E: Couldn't find directory $this_repo"
		exit 2
	fi

	unlink_manifest_files "$module"
	echo "Removing enabled"
	rm "$ENABLED_DIR/$module"
}

unlink_manifest_files () {
	local module=$1
	local manifest="$MANIFEST_DIR/$module"
	local this_repo="$REPO_DIR/$module"

	if [ ! -f "$manifest" ]; then
		echo "W: Couldn't find manifest $manifest, skipping unlink"
		return
	fi

	to_remove=()
	for linked in $(cat "$manifest"); do
		home_file="$HOME/$linked"
		if [ ! -L "$home_file" ]; then
			echo "W: $home_file is not a symbolic link, probably not ours, leaving it alone"
			continue
		fi

		if [[ ! $(readlink $home_file) =~ ^$this_repo ]]; then
			echo "W: $home_file not linked into this repo, leaving it alone."
			continue
		fi

		to_remove=("${to_remove[@]}" $home_file)
	done

	if [[ ${#to_remove[@]} > 0 ]]; then
		for file in ${to_remove[@]}; do
			rm "$file"
		done
	fi
	rm "$manifest"
}

installed () {
	ls "$ENABLED_DIR"
}

list () {
	ls "$MODULE_DIR"
}


update () {
	$MR update
	for module in $(installed); do
		unlink_manifest_files $module
		link_manifest_files $module
	done
}

mr () {
	$MR $@
}





# Command line processing
while getopts "v" opt; do
	echo -n
done
shift $(($OPTIND - 1))


if [[ "$1" = "" ]]; then
	echo "ERROR: Must specify a command."
	usage
	exit 1
fi

case $1 in 
	init)
		init
		;;
	update)
		update
		;;
	mr)
		shift
		mr $@
		;;
	install)
		shift
		install_module $@
		;;
	uninstall)
		shift
		uninstall $@
		;;
	installed)
		shift
		echo $(installed)
		;;
	list)
		shift
		echo $(list)
		;;
	*)
		echo "Argument $1 not understood."
		usage
		exit 2
		;;
esac

